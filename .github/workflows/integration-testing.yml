name: Plio Integration Tests

on:
  pull_request:
  push:
    branches: [master]

jobs:
  cypress:
    runs-on: ubuntu-latest

    # uses GitHub environment
    environment:
      name: Integration Testing

    steps:
      - uses: actions/checkout@v2

      - name: Set up Plio Frontend
        run: |
          # clone the project
          mkdir -p projects/ && cd projects/
          git clone https://github.com/avantifellows/plio-frontend/
          cd plio-frontend/

          # temporary git checkout -- remove before merge
          git checkout feature/cypress-ci && git pull origin feature/cypress-ci

          # create the env file
          cp .env.example .env

          # add env secrets
          echo 'VUE_APP_I18N_LOCALE=${{ secrets.VUE_APP_I18N_LOCALE }}' >> .env
          echo 'VUE_APP_GOOGLE_CLIENT_ID=${{ secrets.VUE_APP_GOOGLE_CLIENT_ID }}' >> .env
          echo 'VUE_APP_BACKEND_API_CLIENT_ID=${{ secrets.VUE_APP_BACKEND_API_CLIENT_ID }}' >> .env
          echo 'VUE_APP_BACKEND_API_CLIENT_SECRET=${{ secrets.VUE_APP_BACKEND_API_CLIENT_SECRET }}' >> .env

          # setup docker containers
          docker-compose up -d --build

      - name: Set up Plio Backend
        run: |
          # clone the project
          mkdir -p projects/ && cd projects/
          git clone https://github.com/avantifellows/plio-backend
          cd plio-backend/

          # temporary git checkout -- remove before merge
          git checkout feature/cypress-ci && git pull origin feature/cypress-ci

          # create the env file
          cp .env.example .env

          # add env secrets
          echo 'SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}' >> .env
          echo 'DEFAULT_OAUTH2_CLIENT_SETUP=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_SETUP }}' >> .env
          echo 'DEFAULT_OAUTH2_CLIENT_ID=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_ID }}' >> .env
          echo 'DEFAULT_OAUTH2_CLIENT_SECRET=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_SECRET }}' >> .env
          echo 'GOOGLE_OAUTH2_CLIENT_ID=${{ secrets.DJANGO_GOOGLE_OAUTH2_CLIENT_ID }}' >> .env
          echo 'GOOGLE_OAUTH2_CLIENT_SECRET=${{ secrets.DJANGO_GOOGLE_OAUTH2_CLIENT_SECRET }}' >> .env

          # setup docker containers
          docker-compose up -d --build

      - name: Set up Plio Analytics
        run: |
          # clone the project
          mkdir -p projects/ && cd projects/
          git clone https://github.com/avantifellows/plio-analytics
          cd plio-analytics/

          # create the env file
          cp .env.example .env

          # add env secrets
          echo 'CUBEJS_API_SECRET=${{ secrets.ANALYTICS_CUBEJS_API_SECRET }}' >> .env

          # setup docker containers
          docker-compose up -d --build

      - name: Run cypress
        run: |
          cd projects/
          cd plio-frontend/
          export cypress_plio_backend_convert_social_auth_token_url=${{ secrets.cypress_plio_backend_convert_social_auth_token_url }}
          export cypress_plio_backend_client_id=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_ID }}
          export cypress_plio_backend_client_secret=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_SECRET }}
          export cypress_auth_google_refresh_token=${{ secrets.cypress_auth_google_refresh_token }}
          export cypress_auth_google_client_id=${{ secrets.cypress_auth_google_client_id }}
          export cypress_auth_google_client_secret=${{ secrets.cypress_auth_google_client_secret }}
          npx cypress run --record --key ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Stop the containers
        if: always()
        run: |
          cd projects/
          cd plio-frontend/ && docker-compose down
          cd ../plio-backend/ && docker-compose down
          cd ../plio-analytics/ && docker-compose down
