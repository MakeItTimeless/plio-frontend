name: Plio CI

on:
  pull_request:
  push:
    branches: [master]

env:
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
  BROWSERSTACK_BASE_URL: ${{ secrets.BROWSERSTACK_BASE_URL }}
  BROWSERSTACK_PROJECT_NAME: ${{ secrets.BROWSERSTACK_PROJECT_NAME }}
  GOOGLE_ACCOUNT_EMAIL: ${{ secrets.GOOGLE_ACCOUNT_EMAIL }}
  GOOGLE_ACCOUNT_PASSWORD: ${{ secrets.GOOGLE_ACCOUNT_PASSWORD }}

jobs:
  pre-commit:
    name: Pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.0

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Dependencies
        run: npm install

      - name: Run Test Cases
        env:
          VUE_APP_MIXPANEL_PROJECT_TOKEN: ${{ secrets.VUE_APP_MIXPANEL_PROJECT_TOKEN }}
          VUE_APP_FRONTEND: ${{ secrets.VUE_APP_FRONTEND }}
        # command to run tests and generate coverage metrics
        run: npm run test:unit

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1

  integration-tests-ubuntu:
    name: Integration tests - Ubuntu
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Plio Frontend
        run: |
          # clone the project
          mkdir -p projects/ && cd projects/
          git clone https://github.com/avantifellows/plio-frontend/
          cd plio-frontend/

          # check branch and switch to branch if exists
          if [ `git branch --list --remote origin/${{ github.head_ref }}` ]
          then
            echo "Switching to branch ${{ github.head_ref }}."
            git checkout ${{ github.head_ref }}
            git pull origin ${{ github.head_ref }}
          else
            echo "Branch not found. Going with default branch."
          fi

          # create the env file
          cp .env.example .env

          # add env secrets
          echo 'VUE_APP_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}' >> .env
          echo 'VUE_APP_BACKEND_API_CLIENT_ID=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_ID }}' >> .env
          echo 'VUE_APP_BACKEND_API_CLIENT_SECRET=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_SECRET }}' >> .env

          # # setup docker containers
          # docker-compose up -d --build

      # - name: Set up Plio Backend
      #   run: |
      #     # clone the project
      #     mkdir -p projects/ && cd projects/
      #     git clone https://github.com/avantifellows/plio-backend
      #     cd plio-backend/

      #     # check branch and switch to branch if exists
      #     if [ `git branch --list --remote origin/${{ github.head_ref }}` ]
      #     then
      #       echo "Switching to branch ${{ github.head_ref }}."
      #       git checkout ${{ github.head_ref }}
      #       git pull origin ${{ github.head_ref }}
      #     else
      #       echo "Branch not found. Going with default branch."
      #     fi

      #     # create the env file
      #     cp .env.example .env

      #     # add env secrets
      #     echo 'SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}' >> .env
      #     echo 'DEFAULT_OAUTH2_CLIENT_SETUP=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_SETUP }}' >> .env
      #     echo 'DEFAULT_OAUTH2_CLIENT_ID=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_ID }}' >> .env
      #     echo 'DEFAULT_OAUTH2_CLIENT_SECRET=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_SECRET }}' >> .env
      #     echo 'GOOGLE_OAUTH2_CLIENT_ID=${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}' >> .env
      #     echo 'GOOGLE_OAUTH2_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}' >> .env

      #     # setup docker containers
      #     docker-compose up -d --build

      # - name: Set up Plio Analytics
      #   run: |
      #     # clone the project
      #     mkdir -p projects/ && cd projects/
      #     git clone https://github.com/avantifellows/plio-analytics
      #     cd plio-analytics/

      #     # check branch and switch to branch if exists
      #     if [ `git branch --list --remote origin/${{ github.head_ref }}` ]
      #     then
      #       echo "Switching to branch ${{ github.head_ref }}."
      #       git checkout ${{ github.head_ref }}
      #       git pull origin ${{ github.head_ref }}
      #     else
      #       echo "Branch not found. Going with default branch."
      #     fi

      #     # create the env file
      #     cp .env.example .env

      #     # add env secrets
      #     echo 'CUBEJS_API_SECRET=${{ secrets.ANALYTICS_CUBEJS_API_SECRET }}' >> .env

      #     # setup docker containers
      #     docker-compose up -d --build

      - name: Set up testcafe
        run: |
          cd projects/plio-frontend/

          # delete the node_modules created by the docker
          echo 'deleting node modules'
          rm -rf node_modules/

          # install dependencies from the current shell user
          echo 'running npm'
          npm install
          echo 'finished npm install'
          echo 'installing testcafe-browser-provider-browserstack'
          npm install -g testcafe-browser-provider-browserstack
          echo 'finished installing testcafe-browser-provider-browserstack'

      - name: Run Windows 10 Chrome@84.0 test
        uses: DevExpress/testcafe-action@latest
        with:
          # args: "'browserstack:chrome@84.0:Windows 10' projects/plio-frontend/tests/testcafe"
          args: "--list-browsers"

      # - name: Run cypress
      #   run: |
      #     cd projects/plio-frontend/

      #     # delete the node_modules created by the docker
      #     echo 'deleting node modules'
      #     rm -rf node_modules/

      #     # install dependencies from the current shell user
      #     echo 'running npm'
      #     npm install
      #     echo 'finished npm install'

      #     # setup env secrets
      #     export cypress_backend_convert_social_auth_token_url=${{ secrets.CYPRESS_PLIO_BACKEND_CONVERT_SOCIAL_AUTH_TOKEN_URL }}
      #     export cypress_backend_client_id=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_ID }}
      #     export cypress_backend_client_secret=${{ secrets.DJANGO_DEFAULT_OAUTH2_CLIENT_SECRET }}
      #     export cypress_auth_google_refresh_token=${{ secrets.CYPRESS_AUTH_GOOGLE_REFRESH_TOKEN }}
      #     export cypress_auth_google_client_id=${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}
      #     export cypress_auth_google_client_secret=${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}

      #     # run cypress test cases
      #     # testing on ubuntu:chrome
      #     npx cypress run --group ubuntu/chrome --browser chrome --record --key ${{ secrets.CYPRESS_RECORD_KEY }}

      #     # testing on ubuntu:firefox
      #     npx cypress run --group ubuntu/firefox --browser firefox --record --key ${{ secrets.CYPRESS_RECORD_KEY }}

      #     # testing on ubuntu:electron
      #     npx cypress run --group ubuntu/electron --browser electron --record --key ${{ secrets.CYPRESS_RECORD_KEY }}

      # - name: Coveralls
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     path-to-lcov: ./projects/plio-frontend/coverage/lcov.info

      - name: Stop the containers
        if: always()
        run: |
          cd projects/
          cd plio-frontend/ && docker-compose down
          cd ../plio-backend/ && docker-compose down
          cd ../plio-analytics/ && docker-compose down
